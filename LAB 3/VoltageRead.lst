                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000 0203C2       3      ljmp MainProgram
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
<<<<<<< Updated upstream
0003              8   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003              9   CE_ADC EQU P2.0
0003             10   MY_MOSI EQU P2.1
0003             11   MY_MISO EQU P2.2
0003             12   MY_SCLK EQU P2.3
0003             13   
0030             14   dseg at 0x30
0030             15   Result: ds 4
0034             16   
0034             17   
0003             18   CSEG
0003             19   ; These 'equ' must match the wiring between the microcontroller and the LCD!
0003             20   LCD_RS equ P1.1
0003             21   LCD_RW equ P1.2
0003             22   LCD_E  equ P1.3
0003             23   LCD_D4 equ P3.2
0003             24   LCD_D5 equ P3.3
0003             25   LCD_D6 equ P3.4
0003             26   LCD_D7 equ P3.5
                 28   	$LIST
00B1             30   
00B1             31   
00B1             32   INIT_SPI:
00B1 D2A2        33    setb MY_MISO ; Make MISO an input pin
00B3 C2A3        34    clr MY_SCLK ; For mode (0,0) SCLK is zero
00B5 22          35    ret
00B6             36   
00B6             37   DO_SPI_G:
00B6 C0E0        38             push acc
00B8 7900        39             mov R1, #0 ; Received byte stored in R1
00BA 7A08        40             mov R2, #8 ; Loop counter (8-bits)
00BC             41   DO_SPI_G_LOOP:
00BC E8          42             mov a, R0 ; Byte to write is in R0
00BD 33          43             rlc a ; Carry flag has bit to write
00BE F8          44             mov R0, a
00BF 92A1        45             mov MY_MOSI, c
00C1 D2A3        46             setb MY_SCLK ; Transmit
00C3 A2A2        47             mov c, MY_MISO ; Read received bit
00C5 E9          48             mov a, R1 ; Save received bit in R1
00C6 33          49             rlc a
00C7 F9          50             mov R1, a
00C8 C2A3        51             clr MY_SCLK
00CA DAF0        52             djnz R2, DO_SPI_G_LOOP
00CC D0E0        53             pop acc
00CE 22          54             ret
00CF             55   
00CF             56   InitSerialPort:
00CF             57       ; Since the reset button bounces, we need to wait a bit before
00CF             58       ; sending messages, otherwise we risk displaying gibberish!
00CF 79DE        59       mov R1, #222
00D1 78A6        60       mov R0, #166
00D3 D8FE        61       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
00D5 D9FA        62       djnz R1, $-4 ; 22.51519us*222=4.998ms
00D7             63       ; Now we can proceed with the configuration
00D7 438780      64            orl     PCON,#0x80
00DA 759852      65            mov     SCON,#0x52
00DD 759B00      66            mov     BDRCON,#0x00
00E0 759AF4      67            mov     BRL,#BRG_VAL
00E3 759B1E      68            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
00E6 22          69       ret
00E7             70   
00E7             71   ; Send a character using the serial port
00E7             72   putchar:
00E7 3099FD      73       jnb TI, putchar
00EA C299        74       clr TI
00EC F599        75       mov SBUF, a
00EE 22          76       ret
00EF             77   
00EF             78   ; Send a constant-zero-terminated string using the serial port
00EF             79   SendString:
00EF E4          80       clr A
00F0 93          81       movc A, @A+DPTR
00F1 6006        82       jz SendStringDone
00F3 1200E7      83       lcall putchar
00F6 A3          84       inc DPTR
00F7 80F6        85       sjmp SendString
00F9             86   SendStringDone:
00F9 22          87       ret
00FA             88    
00FA             89   Hello_World:
00FA 48656C6C    90       DB  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
010A 676F6F64    91   String: db 'good' , '\r', '\n', 0   
     0D0A00
0111             92   ;Forever:
0111             93   
0111             94   ;lcall Delay
0111             95   ;lcall Do_Something_With_Result
0111             96   ;sjmp Forever
0111             97   
0111             98   MainProgram:
0111 75817F      99       mov SP, #7FH ; Set the stack pointer to the begining of idata
0114            100       
0114 12005D     101       lcall LCD_4BIT
0117 1200CF     102       lcall InitSerialPort
011A 1200B1     103       lcall INIT_SPI
011D            104       
011D            105   loop:   
011D            106    
011D C2A0       107            clr CE_ADC
011F            108            
011F 7801       109            mov R0, #00000001B ; Start bit:1
0121            110            
0121 1200B6     111            lcall DO_SPI_G
0124            112            
0124 7880       113            mov R0, #10000000B ; Single ended, read channel 0
0126            114            
0126 1200B6     115            lcall DO_SPI_G
0129            116            
0129 E9         117            mov a, R1 ; R1 contains bits 8 and 9
012A            118            
012A 5403       119            anl a, #00000011B ; We need only the two least significant bits
012C            120            
012C F531       121            mov Result+1, a ; Save result high.
012E 7855       122            mov R0, #55H ; It doesn't matter what we transmit...
0130 1200B6     123            lcall DO_SPI_G
0133 8930       124            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
0135 D2A0       125            setb CE_ADC
0137            126            
0137 E530       127            mov a, Result
0139            128            
0139 B40008     129            cjne a, #0x0, goto
013C            130          
013C 9000FA     131       mov DPTR, #Hello_World
013F            132   
013F 1200EF     133       lcall SendString
0142            134       
0142 80D9       135       sjmp loop ; This is equivalent to 'forever: sjmp forever'
0144            136    goto:  
0144 90010A     137            mov DPTR, #String
0147 1200EF     138            lcall SendString
014A C002       139            push AR2
014C 7AC8       139            mov R2, #200
014E 12000E     139            lcall ?Wait_Milli_Seconds
0151 D002       139            pop AR2
0153            140            
0153 80C8       141            sjmp loop   
0155            142   END
=======
0003              8   REF equ 4.096
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   
0030             16   dseg at 0x30
0030             17   Result: ds 4
0034             18   x:   ds 4
0038             19   y:   ds 4
003C             20   bcd: ds 5
0041             21   buffer: ds 30
005F             22   
005F             23   
0000             24   BSEG
0000             25   mf: dbit 1
0001             26   
0003             27   CSEG
0003             28   ; These 'equ' must match the wiring between the microcontroller and the LCD!
0003             29   LCD_RS equ P1.1
0003             30   LCD_RW equ P1.2
0003             31   LCD_E  equ P1.3
0003             32   LCD_D4 equ P3.2
0003             33   LCD_D5 equ P3.3
0003             34   LCD_D6 equ P3.4
0003             35   LCD_D7 equ P3.5
                 37   $LIST
00C7             39   
                546   $LIST
                 41   $LIST
0337             43   
0337             44   ;---------------------------------;
0337             45   ; initialize the slave                 ;
0337             46   ;---------------------------------;
0337             47   
0337             48   INIT_SPI:
0337 D2A2        49    setb MY_MISO ; Make MISO an input pin
0339 C2A3        50    clr MY_SCLK ; For mode (0,0) SCLK is zero
033B 22          51    ret
033C             52   
033C             53   ;---------------------------------;
033C             54   ; recieive and send data               ;
033C             55   ;---------------------------------;
033C             56   
033C             57   DO_SPI_G:
033C C0E0        58             push acc
033E 7900        59             mov R1, #0 ; Received byte stored in R1
0340 7A08        60             mov R2, #8 ; Loop counter (8-bits)
0342             61   DO_SPI_G_LOOP:
0342 E8          62             mov a, R0 ; Byte to write is in R0
0343 33          63             rlc a ; Carry flag has bit to write
0344 F8          64             mov R0, a
0345 92A1        65             mov MY_MOSI, c
0347 D2A3        66             setb MY_SCLK ; Transmit
0349 A2A2        67             mov c, MY_MISO ; Read received bit
034B E9          68             mov a, R1 ; Save received bit in R1
034C 33          69             rlc a
034D F9          70             mov R1, a
034E C2A3        71             clr MY_SCLK
0350 DAF0        72             djnz R2, DO_SPI_G_LOOP
0352 D0E0        73             pop acc
0354 22          74             ret
0355             75   
0355             76   ;---------------------------------;
0355             77   ; initialize the serial ports     ;
0355             78   ;---------------------------------;
0355             79   InitSerialPort:
0355             80       ; Since the reset button bounces, we need to wait a bit before
0355             81       ; sending messages, otherwise we risk displaying gibberish!
0355 79DE        82       mov R1, #222
0357 78A6        83       mov R0, #166
0359 D8FE        84       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
035B D9FA        85       djnz R1, $-4 ; 22.51519us*222=4.998ms
035D             86       ; Now we can proceed with the configuration
035D 438780      87            orl     PCON,#0x80
0360 759852      88            mov     SCON,#0x52
0363 759B00      89            mov     BDRCON,#0x00
0366 759AF4      90            mov     BRL,#BRG_VAL
0369 759B1E      91            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
036C 22          92       ret
036D             93   
036D             94   ; Send a character using the serial port
036D             95   putchar:
036D 3099FD      96       jnb TI, putchar
0370 C299        97       clr TI
0372 F599        98       mov SBUF, a
0374 22          99       ret
0375            100       
0375            101   getchar:
0375 3098FD     102            jnb RI, getchar
0378 C298       103            clr RI
037A E599       104            mov a, SBUF
037C 22         105            ret     
037D            106       
037D            107   
037D            108   ; Send a constant-zero-terminated string using the serial port
037D            109   SendString:
037D E4         110       clr A
037E 93         111       movc A, @A+DPTR
037F 6006       112       jz SendStringDone ;if a = 0 go to sendstring done
0381 12036D     113       lcall putchar
0384 A3         114       inc DPTR
0385 80F6       115       sjmp SendString
0387            116   SendStringDone:
0387 22         117       ret
0388            118    
0388            119    
0388            120   GetString:
0388 7841       121            mov R0, #buffer
038A            122   GSLoop:
038A 120375     123            lcall getchar
038D C0E0       124            push acc
038F C3         125            clr c
0390 9410       126            subb a, #10H
0392 D0E0       127            pop acc
0394 4004       128            jc GSDone
0396 F6         129            MOV @R0, A
0397 08         130            inc R0
0398 80F0       131            SJMP GSLoop
039A            132   GSDone:
039A E4         133            clr a
039B F6         134            mov @R0, a
039C 22         135            ret
039D            136   
039D 48656C6C   137   Hello_World: DB  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
03AD 676F6F64   138   String: db 'good' , '\r', '\n', 0 
     0D0A00
03B4 566F6C74   139   Voltage: db 'Voltage is:', '\r', '\n', 0  
     61676520
     69733A0D
     0A00
03C2            140   
03C2            141   
03C2            142   ;---------------------------------;
03C2            143   ; MAIN PROGRAM LOOP                            ;
03C2            144   ;---------------------------------;
03C2            145   
03C2            146   
03C2            147   MainProgram:
03C2 75817F     148       mov SP, #7FH ; Set the stack pointer to the begining of idata
03C5            149       
03C5 C0E0       150            push acc
03C7 7401       150            mov a, #1
03C9 14         150            dec a
03CA 120096     150            lcall ?Set_Cursor_1 ; Select column and row
03CD D0E0       150            pop acc
03CF C083       151            push dph
03D1 C082       151            push dpl
03D3 C0E0       151            push acc
03D5 90039D     151            mov dptr, #Hello_World
03D8 120089     151            lcall ?Send_Constant_String
03DB D0E0       151            pop acc
03DD D082       151            pop dpl
03DF D083       151            pop dph
03E1            152       
03E1 120355     153       lcall InitSerialPort ;sets up serial port with putty
03E4 120337     154       lcall INIT_SPI ;sets up serial port with mcp
03E7            155       
03E7            156   loop: ;begin the infinite loop  
03E7            157    
03E7 C2A0       158            clr CE_ADC
03E9            159            
03E9 7801       160            mov R0, #00000001B ; Start bit:1
03EB 12033C     161            lcall DO_SPI_G
03EE 7880       162            mov R0, #10000000B ; Single ended, read channel 0
03F0 12033C     163            lcall DO_SPI_G
03F3 E9         164            mov a, R1 ; save the high bits first
03F4 5403       165            anl a, #00000011B ; We need only the two least significant bits (8 and 9)
03F6 F531       166            mov Result+1, a ; Save result high.
03F8 7855       167            mov R0, #55H ; It doesn't matter what we transmit...
03FA 12033C     168            lcall DO_SPI_G
03FD 8930       169            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
03FF            170            
03FF D2A0       171            setb CE_ADC ;disable
0401            172            
0401            173   ; calculate voltage out
0401 753430     174            mov x+0, #low (Result % 0x10000) 
0404 753500     174            mov x+1, #high(Result % 0x10000) 
0407 753600     174            mov x+2, #low (Result / 0x10000) 
040A 753700     174            mov x+3, #high(Result / 0x10000) 
040D 753800     175            mov y+0, #low (4096 % 0x10000) 
0410 753910     175            mov y+1, #high(4096 % 0x10000) 
0413 753A00     175            mov y+2, #low (4096 / 0x10000) 
0416 753B00     175            mov y+3, #high(4096 / 0x10000) 
0419 120241     176            lcall mul32
041C 7538FF     177            mov y+0, #low (1023 % 0x10000) 
041F 753903     177            mov y+1, #high(1023 % 0x10000) 
0422 753A00     177            mov y+2, #low (1023 / 0x10000) 
0425 753B00     177            mov y+3, #high(1023 / 0x10000) 
0428 1202CE     178            lcall div32
042B 7538E8     179            mov y+0, #low (1000 % 0x10000) 
042E 753903     179            mov y+1, #high(1000 % 0x10000) 
0431 753A00     179            mov y+2, #low (1000 / 0x10000) 
0434 753B00     179            mov y+3, #high(1000 / 0x10000) 
0437 1202CE     180            lcall div32
043A E534       181            mov a, x
26C93AC            182            hex2bcd(x)
26C93AC            183            ;da a
26C93AC            184            
26C93AC            185   ;        mov a, Result
26C93AC            186            
26C93AC            187   ;        cjne a, #0x0, goto
26C93AC            188    ;   ljmp loop   
26C93AC            189     ;  mov DPTR, #Hello_World
26C93AC            190       
26C93AC            191    ;  da a
26C93AC            192     ;  mov Result, a
26C93AC            193       
26C93AC 9003B4     194       mov DPTR, #Voltage
26C93AF 12037D     195            lcall SendString
26C93B2 C000       196            push ar0
26C93B4 A83C       196            mov r0, bcd
26C93B6 1200B1     196            lcall ?Send_BCD
26C93B9 D000       196            pop ar0
26C93BB C002       197            push AR2
26C93BD 7AFF       197            mov R2, #255
26C93BF 12000E     197            lcall ?Wait_Milli_Seconds
26C93C2 D002       197            pop AR2
26C93C4 C002       198            push AR2
26C93C6 7AFF       198            mov R2, #255
26C93C8 12000E     198            lcall ?Wait_Milli_Seconds
26C93CB D002       198            pop AR2
26C93CD C002       199            push AR2
26C93CF 7AFF       199            mov R2, #255
26C93D1 12000E     199            lcall ?Wait_Milli_Seconds
26C93D4 D002       199            pop AR2
26C93D6 C002       200            push AR2
26C93D8 7AFF       200            mov R2, #255
26C93DA 12000E     200            lcall ?Wait_Milli_Seconds
26C93DD D002       200            pop AR2
26C93DF            201       ;lcall SendString    
26C93DF 0203E7     202       ljmp loop 
26C93E2            203    
26C93E2            204    goto:  
26C93E2            205    
26C93E2            206    ;       mov DPTR, #Hello_World
26C93E2            207    ;       lcall SendString
26C93E2 C000       208            push ar0
26C93E4 783C       208            mov r0, #bcd
26C93E6 1200B1     208            lcall ?Send_BCD
26C93E9 D000       208            pop ar0
26C93EB C002       209            push AR2
26C93ED 7AFF       209            mov R2, #255
26C93EF 12000E     209            lcall ?Wait_Milli_Seconds
26C93F2 D002       209            pop AR2
26C93F4 C002       210            push AR2
26C93F6 7AFF       210            mov R2, #255
26C93F8 12000E     210            lcall ?Wait_Milli_Seconds
26C93FB D002       210            pop AR2
26C93FD            211            
26C93FD 0203E7     212            ljmp loop   
26C9400            213   END
>>>>>>> Stashed changes
