                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000 0203EA       3      ljmp MainProgram
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0003              8   REF equ 4.096
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   
0030             16   dseg at 0x30
0030             17   Result: ds 4
0034             18   x:   ds 4
0038             19   y:   ds 4
003C             20   bcd: ds 5
0041             21   buffer: ds 30
005F             22   
005F             23   
0000             24   BSEG
0000             25   mf: dbit 1
0001             26   
0003             27   CSEG
0003             28   ; These 'equ' must match the wiring between the microcontroller and the LCD!
0003             29   LCD_RS equ P1.1
0003             30   LCD_RW equ P1.2
0003             31   LCD_E  equ P1.3
0003             32   LCD_D4 equ P3.2
0003             33   LCD_D5 equ P3.3
0003             34   LCD_D6 equ P3.4
0003             35   LCD_D7 equ P3.5
                 37   $LIST
00C1             39   
                546   $LIST
                 41   $LIST
0331             43   
0331             44   ;---------------------------------;
0331             45   ; initialize the slave                 ;
0331             46   ;---------------------------------;
0331             47   
0331             48   INIT_SPI:
0331 D2A2        49    setb MY_MISO ; Make MISO an input pin
0333 C2A3        50    clr MY_SCLK ; For mode (0,0) SCLK is zero
0335 22          51    ret
0336             52   
0336             53   ;---------------------------------;
0336             54   ; recieive and send data               ;
0336             55   ;---------------------------------;
0336             56   
0336             57   DO_SPI_G:
0336 C0E0        58             push acc
0338 7900        59             mov R1, #0 ; Received byte stored in R1
033A 7A08        60             mov R2, #8 ; Loop counter (8-bits)
033C             61   DO_SPI_G_LOOP:
033C E8          62             mov a, R0 ; Byte to write is in R0
033D 33          63             rlc a ; Carry flag has bit to write
033E F8          64             mov R0, a
033F 92A1        65             mov MY_MOSI, c
0341 D2A3        66             setb MY_SCLK ; Transmit
0343 A2A2        67             mov c, MY_MISO ; Read received bit
0345 E9          68             mov a, R1 ; Save received bit in R1
0346 33          69             rlc a
0347 F9          70             mov R1, a
0348 C2A3        71             clr MY_SCLK
034A DAF0        72             djnz R2, DO_SPI_G_LOOP
034C D0E0        73             pop acc
034E 22          74             ret
034F             75   
034F             76   ;---------------------------------;
034F             77   ; initialize the serial ports     ;
034F             78   ;---------------------------------;
034F             79   InitSerialPort:
034F             80       ; Since the reset button bounces, we need to wait a bit before
034F             81       ; sending messages, otherwise we risk displaying gibberish!
034F 79DE        82       mov R1, #222
0351 78A6        83       mov R0, #166
0353 D8FE        84       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0355 D9FA        85       djnz R1, $-4 ; 22.51519us*222=4.998ms
0357             86       ; Now we can proceed with the configuration
0357 438780      87            orl     PCON,#0x80
035A 759852      88            mov     SCON,#0x52
035D 759B00      89            mov     BDRCON,#0x00
0360 759AF4      90            mov     BRL,#BRG_VAL
0363 759B1E      91            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0366 22          92       ret
0367             93   
0367             94   ; Send a character using the serial port
0367             95   putchar:
0367 3099FD      96       jnb TI, putchar
036A C299        97       clr TI
036C F599        98       mov SBUF, a
036E 22          99       ret
036F            100       
036F            101   getchar:
036F 3098FD     102            jnb RI, getchar
0372 C298       103            clr RI
0374 E599       104            mov a, SBUF
0376 22         105            ret     
0377            106       
0377            107   
0377            108   ; Send a constant-zero-terminated string using the serial port
0377            109   SendString:
0377 E4         110       clr A
0378 93         111       movc A, @A+DPTR
0379 6006       112       jz SendStringDone ;if a = 0 go to sendstring done
037B 120367     113       lcall putchar
037E A3         114       inc DPTR
037F 80F6       115       sjmp SendString
0381            116   SendStringDone:
0381 22         117       ret
0382            118    
0382            119    
0382            120   GetString:
0382 7841       121            mov R0, #buffer
0384            122   GSLoop:
0384 12036F     123            lcall getchar
0387 C0E0       124            push acc
0389 C3         125            clr c
038A 9410       126            subb a, #10H
038C D0E0       127            pop acc
038E 4004       128            jc GSDone
0390 F6         129            MOV @R0, A
0391 08         130            inc R0
0392 80F0       131            SJMP GSLoop
0394            132   GSDone:
0394 E4         133            clr a
0395 F6         134            mov @R0, a
0396 22         135            ret
0397            136   
0397            137   
0397            138    Display_10_BCD:
0397 C000       139            push ar0
0399 A840       139            mov r0, bcd+4
039B 12009B     139            lcall ?Display_BCD
039E D000       139            pop ar0
03A0 C000       140            push ar0
03A2 A83F       140            mov r0, bcd+3
03A4 12009B     140            lcall ?Display_BCD
03A7 D000       140            pop ar0
03A9 C000       141            push ar0
03AB A83E       141            mov r0, bcd+2
03AD 12009B     141            lcall ?Display_BCD
03B0 D000       141            pop ar0
03B2 C000       142            push ar0
03B4 A83D       142            mov r0, bcd+1
03B6 12009B     142            lcall ?Display_BCD
03B9 D000       142            pop ar0
03BB C000       143            push ar0
03BD A83C       143            mov r0, bcd+0
03BF 12009B     143            lcall ?Display_BCD
03C2 D000       143            pop ar0
03C4 22         144            ret
03C5            145   
03C5            146   
03C5 48656C6C   147   Hello_World: DB  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
03D5 676F6F64   148   String: db 'good' , '\r', '\n', 0 
     0D0A00
03DC 566F6C74   149   Voltage: db 'Voltage is:', '\r', '\n', 0  
     61676520
     69733A0D
     0A00
03EA            150   
03EA            151   
03EA            152   ;---------------------------------;
03EA            153   ; MAIN PROGRAM LOOP                            ;
03EA            154   ;---------------------------------;
03EA            155   
03EA            156   
03EA            157   MainProgram:
03EA 75817F     158       mov SP, #7FH ; Set the stack pointer to the begining of idata
03ED            159       
03ED            160            ; initalize lcd and serial ports
03ED 12005D     161       lcall LCD_4BIT
03F0 12034F     162       lcall InitSerialPort ;
03F3 120331     163       lcall INIT_SPI
03F6            164   
03F6 C0E0       165            push acc
03F8 7401       165            mov a, #1
03FA 14         165            dec a
03FB 120096     165            lcall ?Set_Cursor_1 ; Select column and row
03FE D0E0       165            pop acc
0400 C083       166            push dph
0402 C082       166            push dpl
0404 C0E0       166            push acc
0406 9003C5     166            mov dptr, #Hello_World
0409 120089     166            lcall ?Send_Constant_String
040C D0E0       166            pop acc
040E D082       166            pop dpl
0410 D083       166            pop dph
0412            167       
0412            168       
0412            169   loop: ;begin the infinite loop  
0412            170    
0412 C2A0       171            clr CE_ADC
0414            172            
0414 7801       173            mov R0, #00000001B ; Start bit:1
0416 120336     174            lcall DO_SPI_G
0419 7880       175            mov R0, #10000000B ; Single ended, read channel 0
041B 120336     176            lcall DO_SPI_G
041E E9         177            mov a, R1 ; save the high bits first ; since we're reading a 10 bit value
041F 5403       178            anl a, #00000011B ; We need only the two least significant bits (8 and 9)
0421 F531       179            mov Result+1, a ; Save result high.
0423 7855       180            mov R0, #55H ; It doesn't matter what we transmit...
0425 120336     181            lcall DO_SPI_G
0428 8930       182            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
042A            183            
042A D2A0       184            setb CE_ADC ;disable
042C            185                                    
042C E530       186            mov a, Result
042E            187    ;       da a
042E            188            
042E F53C       189            mov bcd, a
0430 C0E0       190            push acc
0432 7401       190            mov a, #1
0434 14         190            dec a
0435 120094     190            lcall ?Set_Cursor_2 ; Select column and row
0438 D0E0       190            pop acc
043A            190   
043A C000       191            push ar0
043C A83C       191            mov r0, bcd
043E 12009B     191            lcall ?Display_BCD
0441 D000       191            pop ar0
0443            192            
0443 C002       193            push AR2
0445 7AFF       193            mov R2, #255
0447 12000E     193            lcall ?Wait_Milli_Seconds
044A D002       193            pop AR2
044C C002       194            push AR2
044E 7AFF       194            mov R2, #255
0450 12000E     194            lcall ?Wait_Milli_Seconds
0453 D002       194            pop AR2
0455            195            
0455            196            ;mov bcd, Result
0455            197            
0455 C0E0       198            push acc
0457 7407       198            mov a, #7
0459 14         198            dec a
045A 120094     198            lcall ?Set_Cursor_2 ; Select column and row
045D D0E0       198            pop acc
045F 120397     199            lcall Display_10_BCD
0462            200            
0462            201    ;       Send_BCD(Result) ; bcd is printed currently 53
0462            202            
0462 85303C     203            mov bcd, Result
0465            204            
0465 12014A     205            lcall bcd2hex ; bcd to x
0468            206   ; i need to change result to decimal!    
0468            207            
0468            208            
0468 C002       209            push AR2
046A 7AFF       209            mov R2, #255
046C 12000E     209            lcall ?Wait_Milli_Seconds
046F D002       209            pop AR2
0471 C002       210            push AR2
0473 7AFF       210            mov R2, #255
0475 12000E     210            lcall ?Wait_Milli_Seconds
0478 D002       210            pop AR2
047A            211   ; calculate voltage out
047A 753430     212            mov x+0, #low (Result % 0x10000) 
047D 753500     212            mov x+1, #high(Result % 0x10000) 
0480 753600     212            mov x+2, #low (Result / 0x10000) 
0483 753700     212            mov x+3, #high(Result / 0x10000) 
0486 753800     213            mov y+0, #low (0x1000 % 0x10000) 
0489 753910     213            mov y+1, #high(0x1000 % 0x10000) 
048C 753A00     213            mov y+2, #low (0x1000 / 0x10000) 
048F 753B00     213            mov y+3, #high(0x1000 / 0x10000) 
0492 12023B     214            lcall mul32
0495 7538FF     215            mov y+0, #low (0x3ff % 0x10000) 
0498 753903     215            mov y+1, #high(0x3ff % 0x10000) 
049B 753A00     215            mov y+2, #low (0x3ff / 0x10000) 
049E 753B00     215            mov y+3, #high(0x3ff / 0x10000) 
04A1 1202C8     216            lcall div32
04A4 7538E8     217            mov y+0, #low (0x3E8 % 0x10000) 
04A7 753903     217            mov y+1, #high(0x3E8 % 0x10000) 
04AA 753A00     217            mov y+2, #low (0x3E8 / 0x10000) 
04AD 753B00     217            mov y+3, #high(0x3E8 / 0x10000) 
04B0 1202C8     218            lcall div32     
04B3 1200C1     219            lcall hex2bcd
04B6            220            
04B6            221   ;        mov a, bcd
04B6            222   ;        da a
04B6            223   ;        mov bcd, a
04B6            224            
04B6 C0E0       225            push acc
04B8 7407       225            mov a, #7
04BA 14         225            dec a
04BB 120096     225            lcall ?Set_Cursor_1 ; Select column and row
04BE D0E0       225            pop acc
04C0 120397     226            lcall Display_10_BCD
04C3            227   
04C3            228   
04C3 9003DC     229       mov DPTR, #Voltage
04C6 120377     230            lcall SendString        
04C9 C000       231            push ar0
04CB A83C       231            mov r0, bcd
04CD 1200B1     231            lcall ?Send_BCD
04D0 D000       231            pop ar0
04D2            232            
04D2 C002       233            push AR2
04D4 7AFF       233            mov R2, #255
04D6 12000E     233            lcall ?Wait_Milli_Seconds
04D9 D002       233            pop AR2
04DB C002       234            push AR2
04DD 7AFF       234            mov R2, #255
04DF 12000E     234            lcall ?Wait_Milli_Seconds
04E2 D002       234            pop AR2
04E4            235   
04E4            236        
04E4 020412     237       ljmp loop 
04E7            238    
04E7            239    
04E7            240   END
