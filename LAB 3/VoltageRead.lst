                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   org 0000H
0000 0205A8       3      ljmp MainProgram
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0003              8   REF equ 4.096
0003              9   
0003             10   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   
0003             16   
0003             17   TIMER0_RELOAD_L DATA 0xf2
0003             18   TIMER0_RELOAD_H DATA 0xf4
0003             19   
0003             20   
0003             21   
0003             22   TIMER0_RATE   EQU 4096             ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0003             23   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             24   
0003             25   SOUND_OUT     equ P3.7
0003             26   SNOOZE_BUTTON equ P0.3
0003             27   FAREN equ P0.5
0003             28   
0003             29   
0003             30   
0003             31   ; External interrupt 0 vector (not used in this code)
0003             32   org 0x0003
0003 32          33            reti
0004             34   
0004             35   ; Timer/Counter 0 overflow interrupt vector
000B             36   org 0x000B
000B 020381      37            ljmp Timer0_ISR
000E             38   
000E             39   ; External interrupt 1 vector (not used in this code)
0013             40   org 0x0013
0013 32          41            reti
0014             42   
0014             43   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             44   org 0x001B
001B 32          45            reti
001C             46   
001C             47   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             48   org 0x0023 
0023 32          49            reti
0024             50            
0024             51   ; Timer/Counter 2 overflow interrupt vector
002B             52   org 0x002B
002B 32          53            reti
002C             54   
002C             55   
0030             56   dseg at 0x30
0030             57   Result: ds 4
0034             58   x:   ds 4
0038             59   y:   ds 4
003C             60   bcd: ds 5
0041             61   buffer: ds 30
005F             62   
005F             63   
0000             64   BSEG
0000             65   mf: dbit 1
0001             66   
002C             67   CSEG
002C             68   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002C             69   LCD_RS equ P1.1
002C             70   LCD_RW equ P1.2
002C             71   LCD_E  equ P1.3
002C             72   LCD_D4 equ P3.2
002C             73   LCD_D5 equ P3.3
002C             74   LCD_D6 equ P3.4
002C             75   LCD_D7 equ P3.5
                 77   $LIST
00F8             79   
                546   $LIST
                 81   $LIST
0368             83   
0368             84   
0368             85   
0368             86   ;---------------------------------;
0368             87   ; Routine to initialize the ISR   ;
0368             88   ; for timer 0                     ;
0368             89   ;---------------------------------;
0368             90   Timer0_Init:
0368 E589        91            mov a, TMOD
036A 54F0        92            anl a, #0xf0 ; Clear the bits for timer 0
036C 4401        93            orl a, #0x01 ; Configure timer 0 as 16-timer
036E F589        94            mov TMOD, a
0370 758CEA      95            mov TH0, #high(TIMER0_RELOAD)
0373 758AE8      96            mov TL0, #low(TIMER0_RELOAD)
0376             97            ; Set autoreload value
0376 75F4EA      98            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
0379 75F2E8      99            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
037C            100            ; Enable the timer and interrupts
037C D2A9       101       setb ET0  ; Enable timer 0 interrupt
037E D28C       102       setb TR0  ; Start timer 0
0380 22         103            ret
0381            104   
0381            105   ;---------------------------------;
0381            106   ; ISR for timer 0.  Set to execute;
0381            107   ; every 1/4096Hz to generate a    ;
0381            108   ; 2048 Hz square wave at pin P3.7 ;
0381            109   ;---------------------------------;
0381            110   
0381            111   Timer0_ISR:
0381 B2B7       112            cpl SOUND_OUT; Connect speaker to P3.7!
0383            113   notalarm:
0383 32         114            reti
0384            115   
0384            116   ;---------------------------------;
0384            117   ; initialize the slave                 ;
0384            118   ;---------------------------------;
0384            119   
0384            120   INIT_SPI:
0384 D2A2       121    setb MY_MISO ; Make MISO an input pin
0386 C2A3       122    clr MY_SCLK ; For mode (0,0) SCLK is zero
0388 22         123    ret
0389            124   
0389            125   ;---------------------------------;
0389            126   ; recieive and send data               ;
0389            127   ;---------------------------------;
0389            128   
0389            129   DO_SPI_G:
0389 C0E0       130             push acc
038B 7900       131             mov R1, #0 ; Received byte stored in R1
038D 7A08       132             mov R2, #8 ; Loop counter (8-bits)
038F            133   DO_SPI_G_LOOP:
038F E8         134             mov a, R0 ; Byte to write is in R0
0390 33         135             rlc a ; Carry flag has bit to write
0391 F8         136             mov R0, a
0392 92A1       137             mov MY_MOSI, c
0394 D2A3       138             setb MY_SCLK ; Transmit
0396 A2A2       139             mov c, MY_MISO ; Read received bit
0398 E9         140             mov a, R1 ; Save received bit in R1
0399 33         141             rlc a
039A F9         142             mov R1, a
039B C2A3       143             clr MY_SCLK
039D DAF0       144             djnz R2, DO_SPI_G_LOOP
039F D0E0       145             pop acc
03A1 22         146             ret
03A2            147   
03A2            148   ;---------------------------------;
03A2            149   ; initialize the serial ports     ;
03A2            150   ;---------------------------------;
03A2            151   InitSerialPort:
03A2            152       ; Since the reset button bounces, we need to wait a bit before
03A2            153       ; sending messages, otherwise we risk displaying gibberish!
03A2 79DE       154       mov R1, #222
03A4 78A6       155       mov R0, #166
03A6 D8FE       156       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
03A8 D9FA       157       djnz R1, $-4 ; 22.51519us*222=4.998ms
03AA            158       ; Now we can proceed with the configuration
03AA 438780     159            orl     PCON,#0x80
03AD 759852     160            mov     SCON,#0x52
03B0 759B00     161            mov     BDRCON,#0x00
03B3 759AF4     162            mov     BRL,#BRG_VAL
03B6 759B1E     163            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
03B9 22         164       ret
03BA            165   
03BA            166   ; Send a character using the serial port
03BA            167   putchar1:
03BA 3099FD     168       jnb TI, putchar1
03BD C299       169       clr TI
03BF F599       170       mov SBUF, a
03C1 22         171       ret
03C2            172       
03C2            173   getchar:
03C2 3098FD     174            jnb RI, getchar
03C5 C298       175            clr RI
03C7 E599       176            mov a, SBUF
03C9 22         177            ret     
03CA            178       
03CA            179   
03CA            180   ; Send a constant-zero-terminated string using the serial port
03CA            181   SendString:
03CA E4         182       clr A
03CB 93         183       movc A, @A+DPTR
03CC 6006       184       jz SendStringDone ;if a = 0 go to sendstring done
03CE 1203BA     185       lcall putchar1
03D1 A3         186       inc DPTR
03D2 80F6       187       sjmp SendString
03D4            188       
03D4            189   SendStringDone:
03D4 22         190       ret
03D5            191    
03D5            192    
03D5            193   GetString:
03D5 7841       194            mov R0, #buffer
03D7            195   GSLoop:
03D7 1203C2     196            lcall getchar
03DA C0E0       197            push acc
03DC C3         198            clr c
03DD 9410       199            subb a, #10H
03DF D0E0       200            pop acc
03E1 4004       201            jc GSDone
03E3 F6         202            MOV @R0, A
03E4 08         203            inc R0
03E5 80F0       204            SJMP GSLoop
03E7            205   GSDone:
03E7 E4         206            clr a
03E8 F6         207            mov @R0, a
03E9 22         208            ret
03EA            209   
03EA            210    Display_10_BCD:
03EA C000       211            push ar0
03EC A840       211            mov r0, bcd+4
03EE 1200C4     211            lcall ?Display_BCD
03F1 D000       211            pop ar0
03F3 C000       212            push ar0
03F5 A83F       212            mov r0, bcd+3
03F7 1200C4     212            lcall ?Display_BCD
03FA D000       212            pop ar0
03FC C000       213            push ar0
03FE A83E       213            mov r0, bcd+2
0400 1200C4     213            lcall ?Display_BCD
0403 D000       213            pop ar0
0405 C000       214            push ar0
0407 A83D       214            mov r0, bcd+1
0409 1200C4     214            lcall ?Display_BCD
040C D000       214            pop ar0
040E C000       215            push ar0
0410 A83C       215            mov r0, bcd+0
0412 1200C4     215            lcall ?Display_BCD
0415 D000       215            pop ar0
0417 22         216            ret
0418            217   
0418            218   ; We can display a number any way we want.  In this case with
0418            219   ; four decimal places.
0418            220   Display_formated_BCD:
0418 C0E0       221            push acc
041A 7420       221            mov a, #' '
041C 12007C     221            lcall ?WriteData
041F D0E0       221            pop acc
0421 C000       222            push ar0
0423 A83F       222            mov r0, bcd+3
0425 1200C4     222            lcall ?Display_BCD
0428 D000       222            pop ar0
042A C000       223            push ar0
042C A83E       223            mov r0, bcd+2
042E 1200C4     223            lcall ?Display_BCD
0431 D000       223            pop ar0
0433 C0E0       224            push acc
0435 742E       224            mov a, #'.'
0437 12007C     224            lcall ?WriteData
043A D0E0       224            pop acc
043C C000       225            push ar0
043E A83D       225            mov r0, bcd+1
0440 1200C4     225            lcall ?Display_BCD
0443 D000       225            pop ar0
0445 C000       226            push ar0
0447 A83C       226            mov r0, bcd+0
0449 1200C4     226            lcall ?Display_BCD
044C D000       226            pop ar0
044E 22         227            ret
044F            228            
044F            229   wait_for_P4_5:
044F 20C5FD     230            jb P4.5, $ ; loop while the button is not pressed
0452 C002       231            push AR2
0454 7A32       231            mov R2, #50
0456 120037     231            lcall ?Wait_Milli_Seconds
0459 D002       231            pop AR2 ; debounce time
045B 20C5F1     232            jb P4.5, wait_for_P4_5 ; it was a bounce, try again
045E 30C5FD     233            jnb P4.5, $ ; loop while the button is pressed
0461 22         234            ret
0462            235   
0462            236   
0462            237    
0462            238   Bonus:
0462            239   ;---------------------------------;
0462            240   ; comparisons                                  ;
0462            241   ;---------------------------------;
0462            242            ; x is currently the temperature
0462            243            
0462 753819     244            mov y+0, #low (25 % 0x10000) 
0465 753900     244            mov y+1, #high(25 % 0x10000) 
0468 753A00     244            mov y+2, #low (25 / 0x10000) 
046B 753B00     244            mov y+3, #high(25 / 0x10000) 
046E            245            ;x<y
046E 120200     246            lcall x_lt_y
0471            247            
0471 200026     248            jb mf, printcold
0474            249            
0474 75381B     250            mov y+0, #low (27 % 0x10000) 
0477 753900     250            mov y+1, #high(27 % 0x10000) 
047A 753A00     250            mov y+2, #low (27 / 0x10000) 
047D 753B00     250            mov y+3, #high(27 / 0x10000) 
0480            251            ;x<y
0480 120200     252            lcall x_lt_y
0483 200031     253            jb mf, printperf
0486            254            
0486 75381D     255            mov y+0, #low (29 % 0x10000) 
0489 753900     255            mov y+1, #high(29 % 0x10000) 
048C 753A00     255            mov y+2, #low (29 / 0x10000) 
048F 753B00     255            mov y+3, #high(29 / 0x10000) 
0492            256            ;x<y
0492 120200     257            lcall x_lt_y
0495 20003C     258            jb mf, printhot
0498            259            
0498 8057       260            sjmp printfire
049A            261            
049A            262   printcold:
049A C0E0       263            push acc
049C 7401       263            mov a, #1
049E 14         263            dec a
049F 1200BD     263            lcall ?Set_Cursor_2 ; Select column and row
04A2 D0E0       263            pop acc
04A4 C083       264            push dph
04A6 C082       264            push dpl
04A8 C0E0       264            push acc
04AA 900572     264            mov dptr, #cold
04AD 1200B2     264            lcall ?Send_Constant_String
04B0 D0E0       264            pop acc
04B2 D082       264            pop dpl
04B4 D083       264            pop dph
04B6 22         265            ret
04B7            266            
04B7            267   printperf:
04B7 C0E0       268            push acc
04B9 7401       268            mov a, #1
04BB 14         268            dec a
04BC 1200BD     268            lcall ?Set_Cursor_2 ; Select column and row
04BF D0E0       268            pop acc
04C1 C083       269            push dph
04C3 C082       269            push dpl
04C5 C0E0       269            push acc
04C7 90057C     269            mov dptr, #perf
04CA 1200B2     269            lcall ?Send_Constant_String
04CD D0E0       269            pop acc
04CF D082       269            pop dpl
04D1 D083       269            pop dph
04D3 22         270            ret
04D4            271            
04D4            272   printhot:
04D4 C0E0       273            push acc
04D6 7401       273            mov a, #1
04D8 14         273            dec a
04D9 1200BD     273            lcall ?Set_Cursor_2 ; Select column and row
04DC D0E0       273            pop acc
04DE C083       274            push dph
04E0 C082       274            push dpl
04E2 C0E0       274            push acc
04E4 90058C     274            mov dptr, #hot
04E7 1200B2     274            lcall ?Send_Constant_String
04EA D0E0       274            pop acc
04EC D082       274            pop dpl
04EE D083       274            pop dph
04F0 22         275            ret
04F1            276            
04F1            277   printfire:
04F1 C0E0       278            push acc
04F3 7401       278            mov a, #1
04F5 14         278            dec a
04F6 1200BD     278            lcall ?Set_Cursor_2 ; Select column and row
04F9 D0E0       278            pop acc
04FB C083       279            push dph
04FD C082       279            push dpl
04FF C0E0       279            push acc
0501 900599     279            mov dptr, #fire
0504 1200B2     279            lcall ?Send_Constant_String
0507 D0E0       279            pop acc
0509 D082       279            pop dpl
050B D083       279            pop dph
050D 120511     280            lcall firealarm
0510 22         281            ret
0511            282            
0511            283   ;---------------------------------;
0511            284   ; FIRE ALARM                                   ;
0511            285   ;---------------------------------;      
0511            286   firealarm:
0511 120368     287            lcall Timer0_Init
0514            288            
0514 208313     289            jb SNOOZE_BUTTON, go  ; 
0517 C002       290            push AR2
0519 7A32       290            mov R2, #50
051B 120037     290            lcall ?Wait_Milli_Seconds
051E D002       290            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0520 208307     291            jb SNOOZE_BUTTON, go  ; if the button is not pressed skip
0523 3083FD     292            jnb SNOOZE_BUTTON, $
0526 C28C       293            clr TR0
0528 C2A9       294            clr ET0
052A            295            
052A            296   go:
052A 22         297            ret
052B            298   
052B            299   
052B 48656C6C   300   Hello_World: DB  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
053B 676F6F64   301   String: db 'good' , '\r', '\n', 0 
     0D0A00
0542 566F6C74   302   Voltage: db 'Voltage is:', '\r', '\n', 0  
     61676520
     69733A0D
     0A00
0550 54656D70   303   Temp: db 'Temperature is:', '\r', '\n', 0  
     65726174
     75726520
     69733A0D
     0A00
0562 0D0A00     304   space: db '\r', '\n', 0
0565 54656D70   305   Temper: DB  'Temperature:', 0
     65726174
     7572653A
     00
0572 42756E64   306   cold: DB  'Bundle Up', 0
     6C652055
     7000
057C 54686973   307   perf: DB  'This is Perfect', 0
     20697320
     50657266
     65637400
058C 546F6F20   308   hot: DB  'Too Hot, UGH', 0
     486F742C
     20554748
     00
0599 46495245   309   fire: db 'FIRE FIRE FIRE' , 0
     20464952
     45204649
     524500
05A8            310   
05A8            311   
05A8            312   ;---------------------------------;
05A8            313   ; MAIN PROGRAM LOOP                            ;
05A8            314   ;---------------------------------;
05A8            315   
05A8            316   
05A8            317   MainProgram:
05A8 75817F     318       mov SP, #7FH ; Set the stack pointer to the begining of idata
05AB            319       
05AB            320            ; initalize lcd and serial ports
05AB 120086     321       lcall LCD_4BIT
05AE 1203A2     322       lcall InitSerialPort ;
05B1 120384     323       lcall INIT_SPI
05B4 75E600     324            mov P0M0, #0
05B7 75E700     325       mov P0M1, #0
05BA D2AF       326       setb EA  
05BC            327       
05BC C0E0       328            push acc
05BE 7401       328            mov a, #1
05C0 14         328            dec a
05C1 1200BF     328            lcall ?Set_Cursor_1 ; Select column and row
05C4 D0E0       328            pop acc
05C6 C083       329            push dph
05C8 C082       329            push dpl
05CA C0E0       329            push acc
05CC 900565     329            mov dptr, #Temper
05CF 1200B2     329            lcall ?Send_Constant_String
05D2 D0E0       329            pop acc
05D4 D082       329            pop dpl
05D6 D083       329            pop dph
05D8 C0E0       330            push acc
05DA 740F       330            mov a, #15
05DC 14         330            dec a
05DD 1200BF     330            lcall ?Set_Cursor_1 ; Select column and row
05E0 D0E0       330            pop acc
05E2 74DF       331            mov a, #0xDF
05E4 12007C     331            lcall ?WriteData
05E7 C0E0       332            push acc
05E9 7410       332            mov a, #16
05EB 14         332            dec a
05EC 1200BF     332            lcall ?Set_Cursor_1 ; Select column and row
05EF D0E0       332            pop acc
05F1 7443       333            mov a, #'C'
05F3 12007C     333            lcall ?WriteData
05F6            334   loop: ;begin the infinite loop  
05F6            335    
05F6 C2A0       336            clr CE_ADC
05F8            337            
05F8 7801       338            mov R0, #00000001B ; Start bit:1
05FA 120389     339            lcall DO_SPI_G
05FD 7880       340            mov R0, #10000000B ; Single ended, read channel 0
05FF 120389     341            lcall DO_SPI_G
0602 E9         342            mov a, R1 ; save the high bits first ; since we're reading a 10 bit value
0603 5403       343            anl a, #00000011B ; We need only the two least significant bits (8 and 9)
0605 F531       344            mov Result+1, a ; Save result high.
0607 7855       345            mov R0, #55H ; It doesn't matter what we transmit...
0609 120389     346            lcall DO_SPI_G
060C 8930       347            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
060E            348            
060E D2A0       349            setb CE_ADC ;disable
0610            350   
0610            351   ;start doing stuff       
0610 753400     352            mov x+0, #low (0 % 0x10000) 
0613 753500     352            mov x+1, #high(0 % 0x10000) 
0616 753600     352            mov x+2, #low (0 / 0x10000) 
0619 753700     352            mov x+3, #high(0 / 0x10000) 
061C            353   
061C E530       354            mov a,Result
061E F534       355            mov x,a
0620 E531       356            mov a,Result+1
0622 F535       357            mov x+1,a
0624            358            
0624            359   ;        lcall hex2bcd
0624            360                            
0624            361    ;       Set_Cursor(2, 7)
0624            362   ;        lcall Display_10_BCD
0624            363   ;        Send_BCD(bcd+2)
0624            364   ;        Send_BCD(bcd+1)
0624            365   ;        Send_BCD(bcd)
0624            366   
0624 900562     367            mov DPTR, #space
0627            368   ;        lcall SendString
0627            369            
0627            370    ;       mov bcd, Result
0627            371    ;       mov bcd+1, Result+1
0627            372    ;       mov x, bcd
0627            373   
0627            374    
0627            375   ; calculate voltage out
0627 753400     376            mov x+0, #low (0 % 0x10000) 
062A 753500     376            mov x+1, #high(0 % 0x10000) 
062D 753600     376            mov x+2, #low (0 / 0x10000) 
0630 753700     376            mov x+3, #high(0 / 0x10000) 
0633 753800     377            mov y+0, #low (0 % 0x10000) 
0636 753900     377            mov y+1, #high(0 % 0x10000) 
0639 753A00     377            mov y+2, #low (0 / 0x10000) 
063C 753B00     377            mov y+3, #high(0 / 0x10000) 
063F            378   ;        Load_X(bcd)
063F            379   
063F E530       380            mov a,Result
0641 F534       381            mov x,a
0643 E531       382            mov a,Result+1
0645 F535       383            mov x+1,a
0647            384                    
0647 75389A     385            mov y+0, #low (410 % 0x10000) 
064A 753901     385            mov y+1, #high(410 % 0x10000) 
064D 753A00     385            mov y+2, #low (410 / 0x10000) 
0650 753B00     385            mov y+3, #high(410 / 0x10000) 
0653 120272     386            lcall mul32
0656 7538FF     387            mov y+0, #low (1023 % 0x10000) 
0659 753903     387            mov y+1, #high(1023 % 0x10000) 
065C 753A00     387            mov y+2, #low (1023 / 0x10000) 
065F 753B00     387            mov y+3, #high(1023 / 0x10000) 
0662 1202FF     388            lcall div32
0665 753811     389            mov y+0, #low (273 % 0x10000) 
0668 753901     389            mov y+1, #high(273 % 0x10000) 
066B 753A00     389            mov y+2, #low (273 / 0x10000) 
066E 753B00     389            mov y+3, #high(273 / 0x10000) 
0671 1201DE     390            lcall sub32
0674            391   
0674            392            
0674 C002       393            push AR2
0676 7AFF       393            mov R2, #255
0678 120037     393            lcall ?Wait_Milli_Seconds
067B D002       393            pop AR2
067D C002       394            push AR2
067F 7AFF       394            mov R2, #255
0681 120037     394            lcall ?Wait_Milli_Seconds
0684 D002       394            pop AR2
0686            395          
0686 900550     396       mov DPTR, #Temp
0689            397   ;        lcall SendString
0689            398            
0689 1200F8     399            lcall hex2bcd
068C            400   
068C C000       401            push ar0
068E A83C       401            mov r0, bcd
0690 1200E2     401            lcall ?Send_BCD
0693 D000       401            pop ar0 
0695            402       
0695 900562     403       mov DPTR, #space
0698 1203CA     404            lcall SendString 
069B            405            
069B C0E0       406            push acc
069D 740D       406            mov a, #13
069F 14         406            dec a
06A0 1200BF     406            lcall ?Set_Cursor_1 ; Select column and row
06A3 D0E0       406            pop acc
06A5 C000       407            push ar0
06A7 A83C       407            mov r0, bcd
06A9 1200C4     407            lcall ?Display_BCD
06AC D000       407            pop ar0
06AE            408            
06AE 120462     409            lcall Bonus
06B1            410            
06B1 0205F6     411       ljmp loop 
06B4            412            
06B4            413   END
